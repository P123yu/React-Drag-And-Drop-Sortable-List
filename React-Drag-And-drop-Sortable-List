
// // import React, { useState } from "react";
// // import { SortableContainer, SortableElement } from "react-sortable-hoc";

// // // Manually defined initial list items
// // const initialItems = [
// //   { id: "1", title: "Item 1", body: "Description of Item 1" },
// //   { id: "2", title: "Item 2", body: "Description of Item 2" },
// //   { id: "3", title: "Item 3", body: "Description of Item 3" },
// //   { id: "4", title: "Item 4", body: "Description of Item 4" },
// //   { id: "5", title: "Item 5", body: "Description of Item 5" },
// // ];

// // const SortableItem = SortableElement(({ item }) => (
// //   <div className="item">
// //     <p className="title">{item.title}</p>
// //     <p className="body">{item.body}</p>
// //     <div className="small">item.id: {item.id}</div>
// //   </div>
// // ));

// // const SortableList = SortableContainer(({ items }) => {
// //   return (
// //     <div>
// //       {items.map((item, index) => (
// //         <SortableItem key={item.id} index={index} item={item} />
// //       ))}
// //     </div>
// //   );
// // });

// // const A = () => {
// //   const [items, setItems] = useState(initialItems);

// //   const onSortEnd = ({ oldIndex, newIndex }) => {
// //     const reorderedItems = arrayMove(items, oldIndex, newIndex);
// //     setItems(reorderedItems);
// //   };

// //   const arrayMove = (array, oldIndex, newIndex) => {
// //     const newArray = array.slice();
// //     newArray.splice(newIndex, 0, newArray.splice(oldIndex, 1)[0]);
// //     return newArray;
// //   };

// //   return (
// //     <div>
// //       <h1>Sortable List Example</h1>
// //       <SortableList items={items} onSortEnd={onSortEnd} useDragHandle />
// //     </div>
// //   );
// // };

// // export default A;

// import React, { useState } from "react";
// import { RiDragMove2Line } from "react-icons/ri";

// const A = () => {
//   const [items, setItems] = useState([
//     {
//       id: 1,
//       name: "Kristina Zasiadko",
//       image:
//         "https://media.geeksforgeeks.org/wp-content/uploads/20230816223829/geeksgforgeeks-logo-1.png",
//     },
//     {
//       id: 2,
//       name: "John Doe",
//       image:
//         "https://media.geeksforgeeks.org/wp-content/uploads/20230721212159/gfg-logo.jpeg",
//     },
//     {
//       id: 3,
//       name: "Jane Smith",
//       image:
//         "https://media.geeksforgeeks.org/wp-content/uploads/20230909123918/GeeksforGeeks-Wide-logo-black.png",
//     },
//   ]);
//   const [draggingItem, setDraggingItem] = useState(null);
//   const [newItemName, setNewItemName] = useState("");
//   const [newItemImage, setNewItemImage] = useState("");

//   const handleDragStart = (e, item) => {
//     setDraggingItem(item);
//     e.dataTransfer.setData("text/plain", "");
//   };

//   const handleDragEnd = () => {
//     setDraggingItem(null);
//   };

//   const handleDragOver = (e) => {
//     e.preventDefault();
//   };

//   const handleDrop = (e, targetItem) => {
//     if (!draggingItem) return;

//     const currentIndex = items.indexOf(draggingItem);
//     const targetIndex = items.indexOf(targetItem);

//     if (currentIndex !== -1 && targetIndex !== -1) {
//       const updatedItems = [...items];
//       updatedItems.splice(currentIndex, 1);
//       updatedItems.splice(targetIndex, 0, draggingItem);
//       setItems(updatedItems);
//     }
//   };

//   const handleNameChange = (e) => {
//     setNewItemName(e.target.value);
//   };

//   const handleImageChange = (e) => {
//     setNewItemImage(e.target.value);
//   };

//   const addNewItem = () => {
//     // Generate a unique ID for the new item
//     const newItemId = Math.max(...items.map((item) => item.id), 0) + 1;
//     const newItem = {
//       id: newItemId,
//       name: newItemName,
//       image: newItemImage,
//     };

//     // Add the new item to the state
//     setItems([...items, newItem]);
//     setNewItemName(""); // Clear the input fields
//     setNewItemImage("");
//   };

//   return (
//     <div className="sortable-list">
//       <div className="new-item">
//         <input
//           type="text"
//           placeholder="Name"
//           value={newItemName}
//           onChange={handleNameChange}
//           className="input-field"
//         />
//         <input
//           type="text"
//           placeholder="Image URL"
//           value={newItemImage}
//           onChange={handleImageChange}
//           className="input-field"
//         />
//         <button onClick={addNewItem} className="add-button">
//           Add New Item
//         </button>
//       </div>
//       {items.map((item, index) => (
//         <div
//           key={item.id}
//           className={`item ${item === draggingItem ? "dragging" : ""}`}
//           draggable="true"
//           onDragStart={(e) => handleDragStart(e, item)}
//           onDragEnd={handleDragEnd}
//           onDragOver={handleDragOver}
//           onDrop={(e) => handleDrop(e, item)}
//         >
//           <div className="details">
//             <img src={item.image} alt={item.name} />
//             <span>{item.name}</span>
//           </div>

//           {/* Use the React icon component */}
//           <RiDragMove2Line />
//         </div>
//       ))}
//     </div>
//   );
// };

// export default A;

// import React, { useState } from "react";
// import { SortableContainer, SortableElement } from "react-sortable-hoc";

// // Manually defined initial list items
// const initialItems = [
//   { id: "1", title: "Item 1", body: "Description of Item 1" },
//   { id: "2", title: "Item 2", body: "Description of Item 2" },
//   { id: "3", title: "Item 3", body: "Description of Item 3" },
//   { id: "4", title: "Item 4", body: "Description of Item 4" },
//   { id: "5", title: "Item 5", body: "Description of Item 5" },
// ];

// const SortableItem = SortableElement(({ item }) => (
//   <div className="item">
//     <p className="title">{item.title}</p>
//     <p className="body">{item.body}</p>
//     <div className="small">item.id: {item.id}</div>
//   </div>
// ));

// const SortableList = SortableContainer(({ items }) => {
//   return (
//     <div>
//       {items.map((item, index) => (
//         <SortableItem key={item.id} index={index} item={item} />
//       ))}
//     </div>
//   );
// });

// const A = () => {
//   const [items, setItems] = useState(initialItems);

//   const onSortEnd = ({ oldIndex, newIndex }) => {
//     const reorderedItems = arrayMove(items, oldIndex, newIndex);
//     setItems(reorderedItems);
//   };

//   const arrayMove = (array, oldIndex, newIndex) => {
//     const newArray = array.slice();
//     newArray.splice(newIndex, 0, newArray.splice(oldIndex, 1)[0]);
//     return newArray;
//   };

//   return (
//     <div>
//       <h1>Sortable List Example</h1>
//       <SortableList items={items} onSortEnd={onSortEnd} useDragHandle />
//     </div>
//   );
// };

// export default A;

// ================================================================================================================================================================================

//    for only text

import React, { useState } from "react";
import { RiDragMove2Line } from "react-icons/ri";

const A = () => {
  const [items, setItems] = useState([
    { id: 1, name: "Kristina Zasiadko" },
    { id: 2, name: "John Doe" },
    { id: 3, name: "Jane Smith" },
  ]);
  const [draggingItem, setDraggingItem] = useState(null);
  const [newItemName, setNewItemName] = useState("");

  const handleDragStart = (e, item) => {
    setDraggingItem(item);
    e.dataTransfer.setData("text/plain", "");
  };

  const handleDragEnd = () => {
    setDraggingItem(null);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e, targetItem) => {
    if (!draggingItem) return;

    const currentIndex = items.indexOf(draggingItem);
    const targetIndex = items.indexOf(targetItem);

    if (currentIndex !== -1 && targetIndex !== -1) {
      const updatedItems = [...items];
      updatedItems.splice(currentIndex, 1);
      updatedItems.splice(targetIndex, 0, draggingItem);
      setItems(updatedItems);
    }
  };

  const handleNameChange = (e) => {
    setNewItemName(e.target.value);
  };

  const addNewItem = () => {
    const newItemId = Math.max(...items.map((item) => item.id), 0) + 1;
    const newItem = { id: newItemId, name: newItemName };
    setItems([...items, newItem]);
    setNewItemName(""); // Clear the input field
  };

  return (
    <div className="sortable-list">
      <div className="new-item">
        <input
          type="text"
          placeholder="Name"
          value={newItemName}
          onChange={handleNameChange}
          className="input-field"
        />
        <button onClick={addNewItem} className="add-button">
          Add New Item
        </button>
      </div>
      {items.map((item, index) => (
        <div
          key={item.id}
          className={`item ${item === draggingItem ? "dragging" : ""}`}
          draggable="true"
          onDragStart={(e) => handleDragStart(e, item)}
          onDragEnd={handleDragEnd}
          onDragOver={handleDragOver}
          onDrop={(e) => handleDrop(e, item)}
        >
          <div className="details">
            <span>{item.name}</span>
          </div>
          <RiDragMove2Line />
        </div>
      ))}
    </div>
  );
};

export default A;
